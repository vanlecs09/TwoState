//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public TileActiveListenerComponent tileActiveListener { get { return (TileActiveListenerComponent)GetComponent(GameComponentsLookup.TileActiveListener); } }
    public bool hasTileActiveListener { get { return HasComponent(GameComponentsLookup.TileActiveListener); } }

    public void AddTileActiveListener(System.Collections.Generic.List<ITileActiveListener> newValue) {
        var index = GameComponentsLookup.TileActiveListener;
        var component = (TileActiveListenerComponent)CreateComponent(index, typeof(TileActiveListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceTileActiveListener(System.Collections.Generic.List<ITileActiveListener> newValue) {
        var index = GameComponentsLookup.TileActiveListener;
        var component = (TileActiveListenerComponent)CreateComponent(index, typeof(TileActiveListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveTileActiveListener() {
        RemoveComponent(GameComponentsLookup.TileActiveListener);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherTileActiveListener;

    public static Entitas.IMatcher<GameEntity> TileActiveListener {
        get {
            if (_matcherTileActiveListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.TileActiveListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherTileActiveListener = matcher;
            }

            return _matcherTileActiveListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public void AddTileActiveListener(ITileActiveListener value) {
        var listeners = hasTileActiveListener
            ? tileActiveListener.value
            : new System.Collections.Generic.List<ITileActiveListener>();
        listeners.Add(value);
        ReplaceTileActiveListener(listeners);
    }

    public void RemoveTileActiveListener(ITileActiveListener value, bool removeComponentWhenEmpty = true) {
        var listeners = tileActiveListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveTileActiveListener();
        } else {
            ReplaceTileActiveListener(listeners);
        }
    }
}
